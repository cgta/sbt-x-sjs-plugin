package cgta.crossplugin

import sbt._

class CrossJvmSjsProjects(val name: String) extends Plugin {
  val sharedSourceSettings = Seq(
    unmanagedSourceDirectories in Compile += baseDirectory(_ / ".." / name / "src" / "main" / "scala").value,
    unmanagedSourceDirectories in Test += baseDirectory(_ / ".." / name / "src" / "test" / "scala").value)

  private def p(name: String) = Project(name, file(name))

  //This project is provided so that the gen-idea script will make a project for intellij
  //As such the jvm libraries are used
  lazy val shared: Project = p(name)
  lazy val jvm   : Project = p(name + "-jvm").settings(sharedSourceSettings: _*)
  lazy val sjs   : Project = p(name + "-sjs").settings(sharedSourceSettings ++ ScalaJSPlugin.scalaJSSettings: _*)

  def dependsOn(deps: CrossJvmSjsProjects*): CrossJvmSjsProjects = {
    shared.dependsOn(deps.map(x => x.shared: sbt.ClasspathDep[sbt.ProjectReference]): _*)
    jvm.dependsOn(deps.map(x => x.jvm: sbt.ClasspathDep[sbt.ProjectReference]): _*)
    sjs.dependsOn(deps.map(x => x.sjs: sbt.ClasspathDep[sbt.ProjectReference]): _*)
    this
  }

  def settingsShared(ss: Def.Setting[_]*): CrossJvmSjsProjects = {
    shared.settings(ss: _*)
    jvm.settings(ss: _*)
    sjs.settings(ss: _*)
    this
  }

  def settingsJvm(ss: Def.Setting[_]*): CrossJvmSjsProjects = {
    jvm.settings(ss: _*)
    this
  }

  def settingsSjs(ss: Def.Setting[_]*): CrossJvmSjsProjects = {
    sjs.settings(ss: _*)
    this
  }
}